--- !ruby/object:RI::ClassDescription 
attributes: 
- !ruby/object:RI::Attribute 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: The client's JID
  name: jid
  rw: R
class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: The client class provides everything needed to build a basic XMPP Client.
- !ruby/struct:SM::Flow::P 
  body: If you want your connection to survive disconnects and timeouts, catch exception in Stream#on_exception and re-call Client#connect and Client#auth. Don't forget to re-send initial Presence and everything else you need to setup your session.
constants: []

full_name: Jabber::Client
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: auth
- !ruby/object:RI::MethodSummary 
  name: auth_anonymous
- !ruby/object:RI::MethodSummary 
  name: auth_anonymous_sasl
- !ruby/object:RI::MethodSummary 
  name: auth_nonsasl
- !ruby/object:RI::MethodSummary 
  name: auth_sasl
- !ruby/object:RI::MethodSummary 
  name: bind
- !ruby/object:RI::MethodSummary 
  name: close
- !ruby/object:RI::MethodSummary 
  name: connect
- !ruby/object:RI::MethodSummary 
  name: password=
- !ruby/object:RI::MethodSummary 
  name: register
- !ruby/object:RI::MethodSummary 
  name: register_info
- !ruby/object:RI::MethodSummary 
  name: remove_registration
- !ruby/object:RI::MethodSummary 
  name: start
- !ruby/object:RI::MethodSummary 
  name: supports_anonymous?
- !ruby/object:RI::MethodSummary 
  name: unbind
name: Client
superclass: Connection
